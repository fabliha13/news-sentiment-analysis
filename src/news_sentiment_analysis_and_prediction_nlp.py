# -*- coding: utf-8 -*-
"""News Sentiment Analysis and Prediction NLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Do_x94M5oDbEfedix1cUbDEKOzuQ4ewr
"""

# Suppress warnings
import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
file_path = '/content/news_sentiment_analysis.csv'
df = pd.read_csv(file_path)

"""Initial Exploration"""

df.head()

"""Data Cleaning and Preprocessing"""

#Check for missing values
df.isnull().sum()

# Drop rows with missing values
df.dropna(inplace=True)

# Convert 'Published At' to datetime
df['Published At'] = pd.to_datetime(df['Published At'])

"""Sentiment Distribution"""

# Plot the distribution of sentiments
plt.figure(figsize=(10,6))
sns.countplot(x='Sentiment', data=df)
plt.title("sentiment Distribution")
plt.show()

"""Sentiment by Source"""

plt.figure(figsize=(14,8))
sns.countplot(x='Source',hue= 'Sentiment', data=df)
plt.title("Sentiment by Source")
# plt.xtricks(rotation=90)
plt.show()

"""Predicting Sentiment

Step 1: Prepare the data for modeling
"""

# Prepare the data for modeling
x = df['Description']
y = df['Sentiment']

# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state=42)

# Vectorize the text data
vectorizer = TfidfVectorizer()
x_train_vec = vectorizer.fit_transform(x_train)
x_test_vec = vectorizer.transform(x_test)

"""Step 2: Training the model"""

model = LogisticRegression()
model.fit(x_train_vec, y_train)

"""Step 3: Making prediction and metrics evaluation"""

# Make predictions on the test set
y_pred = model.predict(x_test_vec)

#Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

# Print accuracy and classification report
print(f"Accuracy: {accuracy:.2f}")
print("Classification Report:")
print(report)

# Plot the confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Negative', 'Neutral', 'Positive'],
            yticklabels=['Negative', 'Neutral', 'Positive'])
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()